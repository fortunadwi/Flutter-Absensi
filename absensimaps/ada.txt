// ignore_for_file: unused_import, avoid_print, prefer_const_constructors_in_immutables, unnecessary_string_interpolations, prefer_if_null_operators, unrelated_type_equality_checks, unnecessary_null_comparison, prefer_is_empty, unused_local_variable, sized_box_for_whitespace

import 'package:absensimaps/controller/login_func.dart';
import 'package:absensimaps/gak%20kepake/auth_page.dart';
import 'package:absensimaps/pages/Homepage/controller/page_index_admin.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:convex_bottom_bar/convex_bottom_bar.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:intl/intl.dart';

import 'controller/home_controller.dart';

FirebaseAuth auth = FirebaseAuth.instance;

class PageAdmin extends StatelessWidget {
  final pageC = Get.find<PageIndexController>();
  PageAdmin({super.key});

  // void signUserOut() {};

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        body: StreamBuilder<DocumentSnapshot<Map<String, dynamic>>>(
          stream: streamUser(),
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.waiting) {
              return const Center(
                child: CircularProgressIndicator(),
              );
            }

            if (snapshot.hasData) {
              Map<String, dynamic> user = snapshot.data!.data()!;
              String defaulImage =
                  "https://ui-avatars.com/api/?name=${user['nama']}";

              return ListView(
                padding: const EdgeInsets.all(20),
                children: [
                  Row(
                    children: [
                      ClipOval(
                        child: Container(
                          width: 75,
                          height: 75,
                          color: Colors.grey.shade200,
                          child: Image.network(
                            user["profile"] != null
                                ? user["profile"]
                                : defaulImage,
                            fit: BoxFit.cover,
                          ),
                        ),
                      ),
                      const SizedBox(
                        width: 10,
                      ),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        // ignore: prefer_const_literals_to_create_immutables
                        children: [
                          const Text(
                            "Welcome,",
                            style: TextStyle(
                                fontSize: 20, fontWeight: FontWeight.bold),
                          ),
                          Container(
                            width: 200,
                            child: Text(user["address"] != null
                                ? "${user['address']}"
                                : "Belum ada lokasi"),
                          ),
                        ],
                      )
                    ],
                  ),
                  const SizedBox(
                    height: 20,
                  ),
                  Container(
                    padding: const EdgeInsets.all(20),
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(20),
                      color: Colors.grey[200],
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      // ignore: prefer_const_literals_to_create_immutables
                      children: [
                        Text(
                          "${user['job']}",
                          style: const TextStyle(
                              fontSize: 20, fontWeight: FontWeight.bold),
                        ),
                        const SizedBox(
                          height: 20,
                        ),
                        Text(
                          "${user['nim']}",
                          style: const TextStyle(
                              fontSize: 30, fontWeight: FontWeight.bold),
                        ),
                        const SizedBox(
                          height: 20,
                        ),
                        Text(
                          "${user['nama']}",
                          style: const TextStyle(
                              fontSize: 18, fontWeight: FontWeight.bold),
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(
                    height: 20,
                  ),
                  Container(
                    padding: const EdgeInsets.all(20),
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(20),
                      color: Colors.grey[200],
                    ),
                    child:
                        StreamBuilder<DocumentSnapshot<Map<String, dynamic>>>(
                            stream: streamTodayAbsensi(),
                            builder: (context, snapToday) {
                              if (snapToday.connectionState ==
                                  ConnectionState.waiting) {
                                //
                                return const Center(
                                  child: CircularProgressIndicator(),
                                );
                              }

                              Map<String, dynamic>? dataToday =
                                  snapToday.data?.data();
                              return Row(
                                mainAxisAlignment:
                                    MainAxisAlignment.spaceAround,
                                children: [
                                  Column(
                                    // ignore: prefer_const_literals_to_create_immutables
                                    children: [
                                      const Text("Masuk"),
                                      Text(dataToday?['Masuk'] == null
                                          ? "-"
                                          : "${DateFormat.jms().format(DateTime.parse(dataToday!['Masuk']['date']))}"),
                                    ],
                                  ),
                                  Container(
                                    width: 2,
                                    height: 40,
                                    color: Colors.grey,
                                  ),
                                  Column(
                                    // ignore: prefer_const_literals_to_create_immutables
                                    children: [
                                      const Text("Keluar"),
                                      Text(dataToday?['Keluar'] == null
                                          ? "-"
                                          : "${DateFormat.jms().format(DateTime.parse(dataToday!['Keluar']['date']))}"),
                                    ],
                                  )
                                ],
                              );
                            }),
                  ),
                  const SizedBox(
                    height: 20,
                  ),
                  Divider(
                    color: Colors.grey[300],
                    thickness: 2,
                  ),
                  const SizedBox(height: 10),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    // ignore: prefer_const_literals_to_create_immutables
                    children: [
                      const Text(
                        "Last 5 Days",
                        style: TextStyle(
                            fontWeight: FontWeight.bold, fontSize: 18),
                      ),
                      TextButton(
                          onPressed: () {
                            Get.toNamed("/allAbsensi");
                          },
                          child: const Text("See more")),
                    ],
                  ),
                  const SizedBox(height: 10),
                  StreamBuilder<QuerySnapshot<Map<String, dynamic>>>(
                    stream: streamLastAbsensi(),
                    builder: (context, snapAbsensi) {
                      if (snapAbsensi.connectionState ==
                          ConnectionState.waiting) {
                        //
                        return const Center(
                          child: CircularProgressIndicator(),
                        );
                      } else {
                        //
                      }
                      if (snapAbsensi.data?.docs.length == 0 ||
                          snapAbsensi.data == null) {
                        //
                        return const SizedBox(
                          height: 150,
                          child: Center(
                            child: Text("Belum Ada Riwayat Absensi"),
                          ),
                        );
                      }

                      return ListView.builder(
                          physics: const NeverScrollableScrollPhysics(),
                          shrinkWrap: true,
                          itemCount: snapAbsensi.data!.docs.length,
                          itemBuilder: (context, index) {
                            Map<String, dynamic> data =
                                snapAbsensi.data!.docs[index].data();
                            return Padding(
                              padding: const EdgeInsets.only(bottom: 20),
                              child: Material(
                                color: Colors.grey[200],
                                borderRadius: BorderRadius.circular(20),
                                child: InkWell(
                                  onTap: () {
                                    Get.toNamed("/detailAbsensi",
                                        arguments: data);
                                  },
                                  borderRadius: BorderRadius.circular(20),
                                  child: Container(
                                    padding: const EdgeInsets.all(20),
                                    decoration: BoxDecoration(
                                      borderRadius: BorderRadius.circular(20),
                                    ),
                                    child: Column(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.start,
                                      children: [
                                        Row(
                                          mainAxisAlignment:
                                              MainAxisAlignment.spaceBetween,
                                          children: [
                                            const Text(
                                              'Masuk',
                                              style: TextStyle(
                                                  fontWeight: FontWeight.bold),
                                            ),
                                            Text(
                                              "${DateFormat.yMMMEd().format(DateTime.parse(data['date']))}",
                                              style: const TextStyle(
                                                  fontWeight: FontWeight.bold),
                                            ),
                                          ],
                                        ),
                                        Text(data['Masuk']?['date'] == null
                                            ? "-"
                                            : "${DateFormat.jms().format(DateTime.parse(data['Masuk']!['date']))}"),
                                        // Text(
                                        //     "${DateFormat.jms().format(DateTime.tryParse(data['Masuk']?['date']) ?? )}"),
                                        const SizedBox(height: 10),
                                        const Text(
                                          "Keluar",
                                          style: TextStyle(
                                              fontWeight: FontWeight.bold),
                                        ),
                                        Text(data['Keluar']?['date'] == null
                                            ? "-"
                                            : "${DateFormat.jms().format(DateTime.parse(data['Keluar']!['date']))}"),
                                      ],
                                    ),
                                  ),
                                ),
                              ),
                            );
                          });
                    },
                  )
                ],
              );
            } else {
              return const Center(
                child: Text("Tidak dapat memuat database user"),
              );
            }
          },
        ),
        bottomNavigationBar: ConvexAppBar(
          style: TabStyle.fixed,
          backgroundColor: Colors.grey.shade900,
          // ignore: prefer_const_literals_to_create_immutables
          items: [
            const TabItem(icon: Icons.home, title: 'Home'),
            const TabItem(icon: Icons.fingerprint, title: 'Absensi'),
            const TabItem(icon: Icons.people, title: 'Profile'),
          ],
          initialActiveIndex: pageC.pageIndex.value,
          onTap: (int i) => pageC.changePage(i),
        ));
  }
}
